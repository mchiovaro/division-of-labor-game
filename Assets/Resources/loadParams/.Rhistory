pos_shuffled <- sample(ICEWS_df_formatted$pos_deciles_target, replace = FALSE)
sample <- t(as.data.frame(pos_shuffled))
shuffled_pos_target <- rbind(shuffled_pos_target, sample)
}
# take the original time series and add it as a row
original_pos <- as.data.frame(ICEWS_df_formatted$pos_deciles_source_target)
original_pos <- as.data.frame(t(original_pos))
shuffled_pos_target <- rbind(shuffled_pos_target, original_pos)
# check to see if we have 1001 distinct time series
print(paste0("Total distinct shuffled positive-event time series (target only) for CRQA: ",
nrow(distinct(shuffled_pos_target))))
if(nrow(distinct(shuffled_pos_target)) != 1001){
print("WARNING: Duplicates in surrogate time series.")
}
# transform rows to columns for binding
shuffled_pos_target <- as.data.frame(t(shuffled_pos_target))
# remove real time series from shuffled dataframe
shuffled_pos_target <- shuffled_pos_target[c(1:1000)]
## count of negative events ##
# create empty data frame
shuffled_neg_target = data.frame()
# generate 1000 random time series and bind to rows
for (i in 1:1000){
neg_shuffled <- sample(ICEWS_df_formatted$neg_deciles_target, replace = FALSE)
sample <- t(as.data.frame(neg_shuffled))
shuffled_neg_target <- rbind(shuffled_neg_target, sample)
}
# take the original time series and add it as a row
original_neg <- as.data.frame(ICEWS_df_formatted$neg_deciles_target)
original_neg <- as.data.frame(t(original_neg))
shuffled_neg_target <- rbind(shuffled_neg_target, original_neg)
# check to see if we have 1001 distinct time series
print(paste0("Total distinct shuffled negative-event time series (target only) for CRQA: ",
nrow(distinct(shuffled_neg_target))))
if(nrow(distinct(shuffled_neg_target)) != 1001){
print("WARNING: Duplicates in surrogate time series.")
}
# transform rows to columns for binding
shuffled_neg_target <- as.data.frame(t(shuffled_neg_target))
# remove real time series from shuffled dataframe
shuffled_neg_target <- shuffled_neg_target[c(1:1000)]
### save to file ###
# bind shuffled data together to save as one file
shuffled_full <- cbind(shuffled_coh,
shuffled_all_source_target,
shuffled_pos_source_target,
shuffled_neg_source_target,
shuffled_all_target,
shuffled_pos_target,
shuffled_neg_target)
# write shuffled data to file
write.table(x = shuffled_full,
file='./data/formatted/primary/shuffled_data_full.csv',
sep=",",
col.names=TRUE,
row.names=FALSE)
#### 5. Create randomized time series for permutation testing for windowed CRQA ####
## social cohesion ##
# create empty data frame
shuffled_coh = data.frame()
# generate 1000 random time series and bind to rows
for (i in 1:1000){
coh_shuffled <- sample(ICEWS_df_formatted$coh_deciles, size = 14, replace = FALSE)
sample <- t(as.data.frame(coh_shuffled))
shuffled_coh <- rbind(shuffled_coh, sample)
}
# check to see if we have 1000 distinct time series
print(paste0("Total distinct shuffled social cohesion time series for windowed CRQA: ",
nrow(distinct(shuffled_coh))))
if(nrow(distinct(shuffled_coh)) != 1000){
print("WARNING: Duplicates in surrogate time series.")
}
# transform rows to columns for binding
shuffled_coh <- as.data.frame(t(shuffled_coh))
### source and target ###
## count of all events ##
# create empty data frame
shuffled_all_source_target = data.frame()
# generate 1000 random time series and bind to rows
for (i in 1:1000){
all_shuffled <- sample(ICEWS_df_formatted$all_deciles_source_target, size = 14, replace = FALSE)
sample <- t(as.data.frame(all_shuffled))
shuffled_all_source_target <- rbind(shuffled_all_source_target, sample)
}
# check to see if we have 1000 distinct time series
print(paste0("Total distinct shuffled all-event time series (source and target) for windowed CRQA: ",
nrow(distinct(shuffled_all_source_target))))
if(nrow(distinct(shuffled_all_source_target)) != 1000){
print("WARNING: Duplicates in surrogate time series.")
}
# transform rows to columns for binding
shuffled_all_source_target <- as.data.frame(t(shuffled_all_source_target))
## count of positive events ##
# create empty data frame
shuffled_pos_source_target = data.frame()
# generate 1000 random time series and bind to rows
for (i in 1:1000){
pos_shuffled <- sample(ICEWS_df_formatted$pos_deciles_source_target, size = 14, replace = FALSE)
sample <- t(as.data.frame(pos_shuffled))
shuffled_pos_source_target <- rbind(shuffled_pos_source_target, sample)
}
# check to see if we have 1000 distinct time series
print(paste0("Total distinct shuffled positive-event time series (source and target) for windowed CRQA: ",
nrow(distinct(shuffled_pos_source_target))))
if(nrow(distinct(shuffled_pos_source_target)) != 1000){
print("WARNING: Duplicates in surrogate time series.")
}
# transform rows to columns for binding
shuffled_pos_source_target <- as.data.frame(t(shuffled_pos_source_target))
## count of negative events ##
# create empty data frame
shuffled_neg_source_target = data.frame()
# generate 1000 random time series and bind to rows
for (i in 1:1000){
neg_shuffled <- sample(ICEWS_df_formatted$neg_deciles_source_target, size = 14, replace = FALSE)
sample <- t(as.data.frame(neg_shuffled))
shuffled_neg_source_target <- rbind(shuffled_neg_source_target, sample)
}
# check to see if we have 1000 distinct time series
print(paste0("Total distinct shuffled negative-event time series (source and target) for windowed CRQA: ",
nrow(distinct(shuffled_neg_source_target))))
if(nrow(distinct(shuffled_neg_source_target)) != 1000){
print("WARNING: Duplicates in surrogate time series.")
}
# transform rows to columns for binding
shuffled_neg_source_target <- as.data.frame(t(shuffled_neg_source_target))
### target only ###
## count of all events ##
# create empty data frame
shuffled_all_target = data.frame()
# generate 1000 random time series and bind to rows
for (i in 1:1000){
all_shuffled <- sample(ICEWS_df_formatted$all_deciles_target, size = 14, replace = FALSE)
sample <- t(as.data.frame(all_shuffled))
shuffled_all_target <- rbind(shuffled_all_target, sample)
}
# check to see if we have 1000 distinct time series
print(paste0("Total distinct shuffled all-event time series (target only) for windowed CRQA: ",
nrow(distinct(shuffled_all_target))))
if(nrow(distinct(shuffled_all_target)) != 1000){
print("WARNING: Duplicates in surrogate time series.")
}
# transform rows to columns for binding
shuffled_all_target <- as.data.frame(t(shuffled_all_target))
## count of positive events ##
# create empty data frame
shuffled_pos_target = data.frame()
# generate 1000 random time series and bind to rows
for (i in 1:1000){
pos_shuffled <- sample(ICEWS_df_formatted$pos_deciles_target, size = 14, replace = FALSE)
sample <- t(as.data.frame(pos_shuffled))
shuffled_pos_target <- rbind(shuffled_pos_target, sample)
}
# check to see if we have 1000 distinct time series
print(paste0("Total distinct shuffled positive-event time series (target only) for windowed CRQA: ",
nrow(distinct(shuffled_pos_target))))
if(nrow(distinct(shuffled_pos_target)) != 1000){
print("WARNING: Duplicates in surrogate time series.")
}
# transform rows to columns for binding
shuffled_pos_target <- as.data.frame(t(shuffled_pos_target))
## count of negative events ##
# create empty data frame
shuffled_neg_target = data.frame()
# generate 1000 random time series and bind to rows
for (i in 1:1000){
neg_shuffled <- sample(ICEWS_df_formatted$neg_deciles_target, size = 14, replace = FALSE)
sample <- t(as.data.frame(neg_shuffled))
shuffled_neg_target <- rbind(shuffled_neg_target, sample)
}
# check to see if we have 1000 distinct time series
print(paste0("Total distinct shuffled negative-event time series (target only) for windowed CRQA: ",
nrow(distinct(shuffled_neg_target))))
if(nrow(distinct(shuffled_neg_target)) != 1000){
print("WARNING: Duplicates in surrogate time series.")
}
# transform rows to columns for binding
shuffled_neg_target <- as.data.frame(t(shuffled_neg_target))
### save to file ###
# bind shuffled data together to save as one file
shuffled_windowed <- cbind(shuffled_coh,
shuffled_all_source_target,
shuffled_pos_source_target,
shuffled_neg_source_target,
shuffled_all_target,
shuffled_pos_target,
shuffled_neg_target)
# write shuffled data to file
write.table(x = shuffled_windowed,
file='./data/formatted/primary/shuffled_data_windowed.csv',
sep=",",
col.names=TRUE,
row.names=FALSE)
setwd("../../")
setwd("../")
setwd("./Downloads/")
test <- read.csv("syria_en_tweet_trimmed_dct.csv")
View(test)
test <- read.csv("syria_merge_sort.csv")
test <- read.csv("syria_merge_sort_2.csv")
unique(test$created_at)
setwd("../Desktop/github/arab-spring/")
# clear environment
rm(list=ls())
raw_tweets <- read.csv("./data/raw/syria_merge_sort.csv",
header = TRUE,
sep = ',')
formatted_tweets <- raw_tweets %>%
# parse day level
mutate(date = (stri_extract_first_regex(created_at, "[0-9]{8}+"))) %>%
# convert to date format
mutate(date = anytime::anydate(date, "%Y%m%d")) %>%
# truncate to date range used
filter(date >= as.Date("2012-03-31")
& date <= as.Date("2012-06-15")) %>%
# number of days since new year
mutate(num_days = yday(date)) %>%
# parse time
mutate(time = str_sub(created_at, 10, 15)) %>%
# subset hour
mutate(hour = as.integer(str_sub(time,1,2))) %>%
# subset minutes
mutate(minute = as.integer(str_sub(time,3,4))) %>%
# subset seconds
mutate(seconds = as.integer(str_sub(time,5,6))) %>%
# calculate total seconds for later analyses
mutate(total_seconds = (num_days*(60^2)*24) + (hour*(60^2)) + (minute*60) + seconds) %>%
# sort by time of tweet
arrange(total_seconds) %>%
# calculate time since the previous tweet
mutate(time_to_tweet = total_seconds - dplyr::lag(total_seconds, 1))
unique(formatted_tweets$date)
View(raw_tweets)
# write formatted tweets to file
write.table(x = formatted_tweets,
file='./data/formatted/primary/formatted_tweets.csv',
sep=",",
col.names=TRUE,
row.names=FALSE)
View(raw_tweets)
View(raw_tweets)
setwd("./Documents/task_allocation_game/Assets/Resources/loadParams/")
# create a new data frame with condition columns
df <- data.frame(matrix(ncol = 10, nrow = 45))
#provide column names
colnames(df) <- c('group_number', 'ie_condition',
'td_1', 'td_1', 'td_1', 'td_1',
'td_1', 'td_1', 'com_condition',
'group_size')
View(df)
nrow(df)
shuffled <- sample(1:6, size = 6, replace = FALSE)
shuffled
sample <- t(as.data.frame(shuffled))
df[, c(2,3)]
df[i, c(3:8)]
i = 1
df[i, c(3:8)]
df[i, c(3:8)] <- sample
df[i, c(3:8)]
View(df)
for (i in 1:45){
shuffled <- sample(1:6, size = 6, replace = FALSE)
sample <- t(as.data.frame(shuffled))
df[i, c(3:8)] <- sample
#df <- rbind(df, sample)
}
View(df)
nrow(df)
# create a random sequence of 1 through 6
shuffled <- sample(1:6, size = 6, replace = FALSE)
View(df)
# for all rows
for (i in 1:nrow(df)){
# create a random sequence of 1 through 6
shuffled <- sample(1:6, size = 6, replace = FALSE)
# turn it into a data frame
sample <- t(as.data.frame(shuffled))
# fill it into a row
df[i, c(3:8)] <- sample
# for each column in that row
for (j in 3:8){
# if the value is greater than 3
if(df[i, j] > 3){
# subtract 3 (making 4 -> 1, 5 -> 2, 6 -> 3)
df[i, j] <- df[i, j] - 3
}
}
}
df[1:15, 2] <- 1
df[16:30, 2] <- 2
df[31:45, 2] <- 3
View(df)
df$experiment_number
df$experiment_number[1:45] <- 1
View(df)
21*15
6*15
90+46
136-45
315-136
135-46
90/6
315-135
180/15
df$experiment_number[1:45] <- 1
df$experiment_number[46:135] <- 2
df$experiment_number[136:nrow(df)] <- 3
# create a new data frame with condition columns
df <- data.frame(matrix(ncol = 10, nrow = 315))
# provide column names
colnames(df) <- c('group_number', 'ie_condition',
'td_1', 'td_1', 'td_1', 'td_1',
'td_1', 'td_1', 'com_condition',
'group_size', 'experiment_number')
# create a new data frame with condition columns
df <- data.frame(matrix(ncol = 10, nrow = 315))
# provide column names
colnames(df) <- c('group_number', 'ie_condition',
'td_1', 'td_1', 'td_1', 'td_1',
'td_1', 'td_1', 'com_condition',
'group_size', 'experiment_number')
# create a new data frame with condition columns
df <- data.frame(matrix(ncol = 11, nrow = 315))
# provide column names
colnames(df) <- c('group_number', 'ie_condition',
'td_1', 'td_1', 'td_1', 'td_1',
'td_1', 'td_1', 'com_condition',
'group_size', 'experiment_number')
df$experiment_number[1:45] <- 1
df$experiment_number[46:135] <- 2
df$experiment_number[136:nrow(df)] <- 3
View(df)
# for all rows
for (i in 1:nrow(df)){
# create a random sequence of 1 through 6
shuffled <- sample(1:6, size = 6, replace = FALSE)
# turn it into a data frame
sample <- t(as.data.frame(shuffled))
# fill it into a row
df[i, c(3:8)] <- sample
# for each column in that row
for (j in 3:8){
# if the value is greater than 3
if(df[i, j] > 3){
# subtract 3 (making 4 -> 1, 5 -> 2, 6 -> 3)
df[i, j] <- df[i, j] - 3
}
}
}
# experiment 1
df$com_condition[1:45] <- 1
# experiments 1 and 2
df$group_size[1:135] <- 1
135-45
45+45
135-45
# set seed for reproducibility
set.seed(2022)
# create a new data frame with condition columns
df <- data.frame(matrix(ncol = 11, nrow = 315))
# provide column names
colnames(df) <- c('group_number', 'ie_condition',
'td_1', 'td_1', 'td_1', 'td_1',
'td_1', 'td_1', 'com_condition',
'group_size', 'experiment_number')
df$experiment_number[1:45] <- 1
df$experiment_number[46:135] <- 2
df$experiment_number[136:nrow(df)] <- 3
# for all rows
for (i in 1:nrow(df)){
# create a random sequence of 1 through 6
shuffled <- sample(1:6, size = 6, replace = FALSE)
# turn it into a data frame
sample <- t(as.data.frame(shuffled))
# fill it into a row
df[i, c(3:8)] <- sample
# for each column in that row
for (j in 3:8){
# if the value is greater than 3
if(df[i, j] > 3){
# subtract 3 (making 4 -> 1, 5 -> 2, 6 -> 3)
df[i, j] <- df[i, j] - 3
}
}
}
# experiment 1
df[1:15, 2] <- 1
df[16:30, 2] <- 2
df[31:45, 2] <- 3
315-135
135+90
225-135
226-135
136-225
225-136
315-226
90-46
90-46
90+15
135-120
120-105
135+30
315-135
180/6
195_30
195+30
225+30
256+30
286+30
136+15
150-135
165+15
195+15
226+15
255+15
285+15
# experiment 1 (split by 15)
df$ie_condition[1:15] <- 1
df$ie_condition[16:30] <- 2
df$ie_condition[31:45] <- 3
# experiment 1
df$com_condition[1:45] <- 1
# experiment 2 - ie = 1
df$com_condition[46:60] <- 1
df$com_condition[61:75] <- 2
df$com_condition[76:90] <- 3
# experiment 2 - ie = 2
df$com_condition[91:105] <- 1
df$com_condition[106:120] <- 2
df$com_condition[121:135] <- 3
View(df)
# experiment 3 - ie = 1
df$com_condition[136:165] <- 1
df$com_condition[166:195] <- 2
df$com_condition[196:225] <- 3
# experiment 3 - ie = 2
df$com_condition[226:255] <- 1
df$com_condition[256:285] <- 2
df$com_condition[286:315] <- 3
# experiments 1 and 2
df$group_size[1:135] <- 1
# experiment 3 condition 1 - ie 1
df$com_condition[136:150] <- 1
df$com_condition[166:180] <- 1
df$com_condition[196:210] <- 1
# experiment 3 condition 1 - ie 2
df$com_condition[226:240] <- 1
df$com_condition[256:270] <- 1
df$com_condition[286:300] <- 1
# experiment 1
df$com_condition[1:45] <- 1
# experiment 2 - ie = 1
df$com_condition[46:60] <- 1
df$com_condition[61:75] <- 2
df$com_condition[76:90] <- 3
# experiment 2 - ie = 2
df$com_condition[91:105] <- 1
df$com_condition[106:120] <- 2
df$com_condition[121:135] <- 3
# experiment 3 - ie = 1
df$com_condition[136:165] <- 1
df$com_condition[166:195] <- 2
df$com_condition[196:225] <- 3
# experiment 3 - ie = 2
df$com_condition[226:255] <- 1
df$com_condition[256:285] <- 2
df$com_condition[286:315] <- 3
# experiments 1 and 2
df$group_size[1:135] <- 1
# experiment 3 condition 1 - ie 1
df$group_size[136:150] <- 1
df$group_size[166:180] <- 1
df$group_size[196:210] <- 1
# experiment 3 condition 1 - ie 2
df$group_size[226:240] <- 1
df$group_size[256:270] <- 1
df$group_size[286:300] <- 1
# experiment 3 condition 2 - ie 1
df$group_size[151:165] <- 2
df$group_size[181:195] <- 2
df$group_size[211:225] <- 2
# experiment 3 condition 2 - ie 2
df$group_size[241:255] <- 2
df$group_size[271:285] <- 2
df$group_size[301:315] <- 2
View(df)
# shuffling experiment 1 rows
shuffled_data = df[sample(1:45), ]
View(df)
View(shuffled_data)
# shuffling experiment 1 rows
shuffled_data_1 = df[sample(1:45), ]
# shuffling experiment 2 rows
shuffled_data_2 = df[sample(46:135), ]
View(shuffled_data_2)
##### Save data #####
shuffled_data_all <- rbind(shuffled_data_1,
shuffled_data_2)
View(shuffled_data_all)
# write shuffled data to file
write.table(x = shuffled_data_all
file='./conditions.csv',
sep=",",
col.names=TRUE,
row.names=FALSE)
# write shuffled data to file
write.table(x = shuffled_data_all,
file='./conditions.csv',
sep=",",
col.names=TRUE,
row.names=FALSE)
